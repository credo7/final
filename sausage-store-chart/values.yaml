global:
  imagePullPolicy: Always
  environment: production
  imageRegistry: "" # Will be set dynamically via --set in the workflow
  domain: front-2022036948.2sem.students-projects.ru
  ###vault:
  ###  host: ip
  ###  name: vault
  ###  vaultToken: someToken


frontend:
### В чарте frontend отсутствуют некоторые важные файлы. Поймите какие и опишите их.
  replicas: 1
  revisionHistoryLimit: 15
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  service:
    port: 80
    type: ClusterIP
  ingress:
    enabled: true
    host: front-2022036948.2sem.students-projects.ru
    path: /
    pathType: Prefix
    tls:
      enabled: true
      secretName: 2sem-students-projects-wildcard-secret
  containerPort: 80
  image:
    repository: sausage-frontend
    tag: latest
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "256Mi"
      cpu: "200m"
  nginxConf: nginx.conf

backend:
  annotations:
    prometheus.io/path: /actuator/prometheus
    prometheus.io/port: "8080"
    prometheus.io/scrape: "true"
  env:
    postgresUri: jdbc:postgresql://postgresql-sausage-store:5432/sausage-store
    postgresUser: store
    postgresPassword: storepassword
    reportPath: /logs/reports
    logPath: /logs
  service:
    port: 8080
    type: ClusterIP
  revisionHistoryLimit: 15
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  image:
    repository: sausage-backend
    tag: latest
  imagePullPolicy: Always
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  containerPort: 8080
  livenessProbe:
    httpGet:
      path: /actuator/health
      port: 8080
    initialDelaySeconds: 60
    periodSeconds: 30
    timeoutSeconds: 5
    failureThreshold: 3
  readinessProbe:
    httpGet:
      path: /actuator/health
      port: 8080
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  vpa:
    enabled: false
    updateMode: "Off"
    minAllowed:
      cpu: 100m
      memory: 128Mi
    maxAllowed:
      cpu: 1000m
      memory: 1Gi

backend-report:
### Опишите значения для backend-report
### Приложение должно использовать стратегию Recreate
### Приложение использует переменную PORT - порт, на котором оно запустится и DB - Uri-подключение к mongodb. 
### DB положите в Secret, PORT в ConfigMap
### Опишите HPA для backend-report
  replicas: 1
  revisionHistoryLimit: 15
  strategy:
    type: Recreate
  env:
    port: "8080"
    mongoUri: mongodb://root:rootpassword@mongodb:27017/reports?authSource=admin
  service:
    port: 8080
    type: ClusterIP
  image:
    repository: sausage-backend-report
    tag: latest
  imagePullPolicy: Always
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "256Mi"
      cpu: "200m"
  containerPort: 8080
  hpa:
    enabled: true
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80

infra:
  postgresql:
    enabled: true
    image: postgres:13
    env:
      POSTGRES_DB: sausage-store
      POSTGRES_USER: store
      POSTGRES_PASSWORD: storepassword
    service:
      port: 5432
      type: ClusterIP
    persistence:
      enabled: true
      size: 1Gi
      storageClass: ""
    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"
      limits:
        memory: "512Mi"
        cpu: "500m"
    containerPort: 5432
  mongodb:
    enabled: true
    image: mongo:4.4
    env:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: rootpassword
    service:
      port: 27017
      type: ClusterIP
    persistence:
      enabled: true
      size: 1Gi
      storageClass: ""
    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"
      limits:
        memory: "512Mi"
        cpu: "500m"
    containerPort: 27017
